//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Input/PieceActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PieceActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PieceActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PieceActions"",
    ""maps"": [
        {
            ""name"": ""PieceMap"",
            ""id"": ""c2f89c52-de76-41cb-8ecd-16cc6bb7ea7e"",
            ""actions"": [
                {
                    ""name"": ""Horizontal Movement"",
                    ""type"": ""Value"",
                    ""id"": ""df6f1442-97ec-4a1d-af82-c4e592e8ad46"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""1141be6e-ef28-4a29-afb0-0478573d1efc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Counter Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""7323e27d-0158-4ead-875e-6ce196a2b3da"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hard Drop"",
                    ""type"": ""Button"",
                    ""id"": ""4d44232c-486f-421d-afd4-fcef73775793"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""4988a3a3-29fc-4b77-b1ff-c3fe1fc9e202"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""285bbfbf-654a-4fe4-8f0b-746b0cc7af37"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""down"",
                    ""id"": ""71c1c442-1f59-4b11-8709-4edf57fe36a3"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0705db3f-cf28-4cf0-b21e-9457869ba9a0"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ba38e98d-ad6c-4509-82fb-0bb1e46c53ae"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b968d6cd-ad38-4392-b6d9-f1d7b40c116b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b60037a-5d24-4011-b9ff-e9efdf0004c6"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ccaeb70-fb65-43ab-8b93-d69346777666"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hard Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""656cecf8-b0bc-4539-8c73-f9a10aeccf6d"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a24c7dcb-6659-4371-838a-210b05385432"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Counter Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d630a9d1-c291-4d0e-97d2-813fa00b786d"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Counter Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PieceMap
        m_PieceMap = asset.FindActionMap("PieceMap", throwIfNotFound: true);
        m_PieceMap_HorizontalMovement = m_PieceMap.FindAction("Horizontal Movement", throwIfNotFound: true);
        m_PieceMap_Rotation = m_PieceMap.FindAction("Rotation", throwIfNotFound: true);
        m_PieceMap_CounterRotation = m_PieceMap.FindAction("Counter Rotation", throwIfNotFound: true);
        m_PieceMap_HardDrop = m_PieceMap.FindAction("Hard Drop", throwIfNotFound: true);
        m_PieceMap_Restart = m_PieceMap.FindAction("Restart", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PieceMap
    private readonly InputActionMap m_PieceMap;
    private IPieceMapActions m_PieceMapActionsCallbackInterface;
    private readonly InputAction m_PieceMap_HorizontalMovement;
    private readonly InputAction m_PieceMap_Rotation;
    private readonly InputAction m_PieceMap_CounterRotation;
    private readonly InputAction m_PieceMap_HardDrop;
    private readonly InputAction m_PieceMap_Restart;
    public struct PieceMapActions
    {
        private @PieceActions m_Wrapper;
        public PieceMapActions(@PieceActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @HorizontalMovement => m_Wrapper.m_PieceMap_HorizontalMovement;
        public InputAction @Rotation => m_Wrapper.m_PieceMap_Rotation;
        public InputAction @CounterRotation => m_Wrapper.m_PieceMap_CounterRotation;
        public InputAction @HardDrop => m_Wrapper.m_PieceMap_HardDrop;
        public InputAction @Restart => m_Wrapper.m_PieceMap_Restart;
        public InputActionMap Get() { return m_Wrapper.m_PieceMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PieceMapActions set) { return set.Get(); }
        public void SetCallbacks(IPieceMapActions instance)
        {
            if (m_Wrapper.m_PieceMapActionsCallbackInterface != null)
            {
                @HorizontalMovement.started -= m_Wrapper.m_PieceMapActionsCallbackInterface.OnHorizontalMovement;
                @HorizontalMovement.performed -= m_Wrapper.m_PieceMapActionsCallbackInterface.OnHorizontalMovement;
                @HorizontalMovement.canceled -= m_Wrapper.m_PieceMapActionsCallbackInterface.OnHorizontalMovement;
                @Rotation.started -= m_Wrapper.m_PieceMapActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_PieceMapActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_PieceMapActionsCallbackInterface.OnRotation;
                @CounterRotation.started -= m_Wrapper.m_PieceMapActionsCallbackInterface.OnCounterRotation;
                @CounterRotation.performed -= m_Wrapper.m_PieceMapActionsCallbackInterface.OnCounterRotation;
                @CounterRotation.canceled -= m_Wrapper.m_PieceMapActionsCallbackInterface.OnCounterRotation;
                @HardDrop.started -= m_Wrapper.m_PieceMapActionsCallbackInterface.OnHardDrop;
                @HardDrop.performed -= m_Wrapper.m_PieceMapActionsCallbackInterface.OnHardDrop;
                @HardDrop.canceled -= m_Wrapper.m_PieceMapActionsCallbackInterface.OnHardDrop;
                @Restart.started -= m_Wrapper.m_PieceMapActionsCallbackInterface.OnRestart;
                @Restart.performed -= m_Wrapper.m_PieceMapActionsCallbackInterface.OnRestart;
                @Restart.canceled -= m_Wrapper.m_PieceMapActionsCallbackInterface.OnRestart;
            }
            m_Wrapper.m_PieceMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @HorizontalMovement.started += instance.OnHorizontalMovement;
                @HorizontalMovement.performed += instance.OnHorizontalMovement;
                @HorizontalMovement.canceled += instance.OnHorizontalMovement;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @CounterRotation.started += instance.OnCounterRotation;
                @CounterRotation.performed += instance.OnCounterRotation;
                @CounterRotation.canceled += instance.OnCounterRotation;
                @HardDrop.started += instance.OnHardDrop;
                @HardDrop.performed += instance.OnHardDrop;
                @HardDrop.canceled += instance.OnHardDrop;
                @Restart.started += instance.OnRestart;
                @Restart.performed += instance.OnRestart;
                @Restart.canceled += instance.OnRestart;
            }
        }
    }
    public PieceMapActions @PieceMap => new PieceMapActions(this);
    public interface IPieceMapActions
    {
        void OnHorizontalMovement(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnCounterRotation(InputAction.CallbackContext context);
        void OnHardDrop(InputAction.CallbackContext context);
        void OnRestart(InputAction.CallbackContext context);
    }
}
